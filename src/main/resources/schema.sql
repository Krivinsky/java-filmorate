drop table IF EXISTS FRIENDSHIP cascade;
drop table IF EXISTS LIKES cascade;
drop table IF EXISTS FILMS cascade;
drop table IF EXISTS FILM_GENRE cascade;
drop table IF EXISTS GENRE cascade;
drop table IF EXISTS USERS cascade;

CREATE TABLE IF NOT EXISTS FILMS (
    FILM_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    TITLE CHARACTER VARYING NOT NULL,
    DESCRIPTION CHARACTER VARYING NOT NULL,
    RELEASE_DATE DATE,
    DURATION INTEGER,
    RATE INTEGER,
    MPA_RATING CHARACTER VARYING
);

create table IF NOT EXISTS USERS
(
    USER_ID  INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    EMAIL    CHARACTER VARYING,
    LOGIN    CHARACTER VARYING,
    NAME     CHARACTER VARYING,
    BIRTHDAY DATE
);

create table IF NOT EXISTS FILM_GENRE
(
    FILM_ID  INTEGER auto_increment unique not null,
    GENRE_ID INTEGER,
    constraint FILM_GENRE_PK
        primary key (FILM_ID)
);

create table IF NOT EXISTS GENRE
(
    GENRE_ID    INTEGER not null,
    GENRE_NAME CHARACTER VARYING,
    constraint GENRE_PK
        primary key (GENRE_ID)
);

create table IF NOT EXISTS FRIENDSHIP
(
    USER_ID   INTEGER not null,
    FRIEND_ID INTEGER,
    constraint FRIENDSHIP_PK
        primary key (USER_ID)

);

create table IF NOT EXISTS LIKES
(
    FILM_ID INTEGER not null,
    USER_ID INTEGER,
    constraint LIKES_PK
        primary key (FILM_ID)
);

alter table LIKES
    add constraint LIKES_USERS_USER_ID_FK
        foreign key (USER_ID) references USERS;

alter table LIKES
    add constraint LIKES_FILMS_ID_FK
        foreign key (FILM_ID) references FILMS;

alter table FRIENDSHIP
    add constraint FRIENDSHIP_USERS_USER_ID_FK
        foreign key (USER_ID) references USERS;

alter table FILM_GENRE
    add constraint FILM_GENRE_GENRE_GENRE_ID_FK
        foreign key (GENRE_ID) references GENRE;

alter table FILM_GENRE
    add constraint FILM_GENRE_FILMS_FILM_ID_FK
        foreign key (FILM_ID) references FILMS;
