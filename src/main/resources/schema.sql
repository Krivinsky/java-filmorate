drop table IF EXISTS FRIENDSHIP cascade;
drop table IF EXISTS LIKES cascade;
drop table IF EXISTS FILMS cascade;
drop table IF EXISTS FILM_GENRE cascade;
drop table IF EXISTS GENRES cascade;
drop table IF EXISTS USERS cascade;

create table IF NOT EXISTS USERS
(
    USER_ID  INTEGER AUTO_INCREMENT PRIMARY KEY,
    EMAIL    CHARACTER VARYING NOT NULL,
    LOGIN    CHARACTER VARYING NOT NULL,
    NAME     CHARACTER VARYING,
    BIRTHDAY DATE,
    DELETED BOOLEAN DEFAULT FALSE,
    UNIQUE (EMAIL),
    UNIQUE (LOGIN)
);

create table IF NOT EXISTS MPA
(
    MPA_ID INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,
    MPA_NAME CHARACTER VARYING
);

CREATE TABLE IF NOT EXISTS FILMS
(
    FILM_ID INTEGER AUTO_INCREMENT PRIMARY KEY,
    TITLE CHARACTER VARYING NOT NULL,
    DESCRIPTION CHARACTER VARYING NOT NULL,
    RELEASE_DATE DATE,
    DURATION INTEGER,
    RATE INTEGER,
    MPA_ID INTEGER REFERENCES MPA (MPA_ID),
    DELETED BOOLEAN DEFAULT FALSE
);

create table IF NOT EXISTS FRIENDSHIP
(
    USER_ID   INTEGER REFERENCES USERS (USER_ID),
    FRIEND_ID INTEGER REFERENCES USERS (USER_ID),
    primary key (USER_ID, FRIEND_ID)

);

create table IF NOT EXISTS LIKES
(
    FILM_ID INTEGER REFERENCES USERS (USER_ID),
    USER_ID INTEGER REFERENCES FILMS (FILM_ID),
    primary key (FILM_ID, USER_ID)
);

create table IF NOT EXISTS GENRES
(
    GENRE_ID   INTEGER AUTO_INCREMENT PRIMARY KEY,
    GENRE_NAME CHARACTER VARYING
);

create table IF NOT EXISTS FILM_GENRE
(
    FILM_ID INTEGER REFERENCES FILMS (FILM_ID),
    GENRE_ID INTEGER REFERENCES GENRES (GENRE_ID) ,
    PRIMARY KEY (FILM_ID, GENRE_ID)
);